package quadEqTest;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import quadEq.QuadEqSolver;

class SolveQEqTest {
	private QuadEqSolver quadEqSolver;

	@BeforeAll
	static void setUpBeforeClass() throws Exception {
	}

	@AfterAll
	static void tearDownAfterClass() throws Exception {
	}

	@BeforeEach
	void setUp() throws Exception {
		quadEqSolver=new QuadEqSolver();		
	}

	@AfterEach
	void tearDown() throws Exception {
	}

	@Test
	void testSolveQEq_01() {
		quadEqSolver.setCoeff(0,1,1);
		String resultCase=quadEqSolver.solveQEq();
		String msg="Testing case that it not a quadratic equation.";
		assertEquals(resultCase, "Not a quadratic equation",msg);
	}
	
	@Test
	void testSolveQEq_02() {
		quadEqSolver.setCoeff(1,1,1);
		String resultCase=quadEqSolver.solveQEq();
		String msg="Testing cases with no roots.";
		assertEquals(resultCase, "No real root");
	}
	@Test
	void testSolveQEq_03() {
		quadEqSolver.setCoeff(1,2,1);
		String resultCase=quadEqSolver.solveQEq();
		double root1=quadEqSolver.getRoot1();
		double root2=quadEqSolver.getRoot2();
		String msg="Testing cases with two equal roots.";
		assertEquals(resultCase, "Two equal real roots",msg);
		assertEquals(root1, -1.0);
		assertEquals(root2==root1,true );
	}
	@Test
	void testSolveQEq_04() {
		quadEqSolver.setCoeff(1,-3,2);
		String resultCase=quadEqSolver.solveQEq();
		double root1=quadEqSolver.getRoot1();
		double root2=quadEqSolver.getRoot2();
		String msg="Testing cases with two distinct real roots.";
		assertEquals(resultCase, "Two distinct real roots",msg);
		assertEquals(root1, 1.0);
		assertEquals(root2,2.0);
	}
	@Test
	void testSolveQEq_05() {
		quadEqSolver.setCoeff(-1.2,-4.8,-3.6);
		String resultCase=quadEqSolver.solveQEq();
		double root1=quadEqSolver.getRoot1();
		double root2=quadEqSolver.getRoot2();
		String msg="Testing cases with negative double number.";
		assertEquals(resultCase, "Two distinct real roots",msg);
		assertEquals(root1, -3.0);
		assertEquals(root2, -1);
	}


}
